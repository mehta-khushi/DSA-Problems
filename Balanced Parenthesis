/* Problem : For a given a string expression containing only round brackets or parentheses, check if they are balanced or not. Brackets are said to be balanced if the bracket which opens last, closes first.
An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "(]"
Output: false */

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Stack<Character> st = new Stack<>();
        String str = sc.nextLine();
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            if(ch=='(' || ch=='[' || ch=='{'){
                st.push(ch);
            }
            else{
                if(st.isEmpty()){
                    System.out.println("false");
                    return;
                }
                char c = st.pop();
                if(ch==')'&& c !='(' || ch=='}' && c!='{' || ch==']' && c!='['){
                    System.out.println("false");
                    return;
                }
            }
        }
        if(st.isEmpty()){
            System.out.println("true");
        }
        
        else{
            System.out.println("false");
        }
        
    }
}
