/* Problem : Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group 
numbers and operators. You may return the answer in any order.
The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.
Example 1:
Input: expression = "2-1-1"
Output: [0,2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2

Example 2:
Input: expression = "2*3-4*5"
Output: [-34,-14,-10,-10,10]
Explanation:
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

Solution :- 
class Solution {
    public List<Integer> diffWaysToCompute(String expression) {
        List<Integer> output = new ArrayList<>();
        boolean isOperatorPresent = false;
        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);
            if (ch == '+' || ch == '-' || ch == '*') {
                isOperatorPresent = true;  
                List<Integer> leftResults = diffWaysToCompute(expression.substring(0, i));
                List<Integer> rightResults = diffWaysToCompute(expression.substring(i + 1));

                for (int left : leftResults) {
                    for (int right : rightResults) {
                        output.add(calculate(left, right, ch));
                    }
                }
            }
        }
        if (!isOperatorPresent) {
            output.add(Integer.parseInt(expression));
        }

        return output;
    }
    public static int calculate(int left, int right, char operator) {
        int val = 0;
        if (operator == '+') {
            val = left + right;
        } else if (operator == '-') {
            val = left - right;
        } else {
            val = left * right;
        }
        return val;
    }
}
